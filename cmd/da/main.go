//-----------------------------------------------------------------------------
/*

6502 Disassembler

*/
//-----------------------------------------------------------------------------

package main

import (
	"fmt"
	"strings"

	"github.com/deadsy/bender/cpu"
)

//-----------------------------------------------------------------------------

func memString(adr uint16, mem []byte) string {
	s := make([]string, len(mem))
	for i, v := range mem {
		s[i] = fmt.Sprintf("%02x", v)
	}
	return fmt.Sprintf("%04x: %-15s", uint16(adr), strings.Join(s, " "))
}

//-----------------------------------------------------------------------------

func main() {

	code := []byte{
		0xa9, 0x00, 0xa8, 0x91, 0x02, 0xc8, 0xca, 0xd0,
		0xfa, 0x60, 0x18, 0x36, 0x00, 0x88, 0xd0, 0x01,
		0x60, 0xe8, 0x4c, 0x0b, 0x02, 0x18, 0x76, 0x00,
		0x88, 0xd0, 0x01, 0x60, 0xca, 0x4c, 0x16, 0x02,
		0x38, 0xa9, 0xff, 0x55, 0x00, 0x69, 0x00, 0x95,
		0x00, 0xe8, 0x88, 0xd0, 0xf4, 0x60, 0x18, 0xa0,
		0x00, 0xb1, 0x02, 0x71, 0x00, 0x91, 0x02, 0xc8,
		0xca, 0xd0, 0xf6, 0x60, 0x38, 0xa0, 0x00, 0xb1,
		0x02, 0xf1, 0x00, 0x91, 0x02, 0xc8, 0xca, 0xd0,
		0xf6, 0x60, 0xa0, 0x00, 0xb1, 0x00, 0x91, 0x02,
		0xc8, 0xca, 0xd0, 0xf8, 0x60, 0xa2, 0x05, 0xa5,
		0x0a, 0x30, 0x07, 0xa0, 0x00, 0x94, 0x00, 0x4c,
		0x6b, 0x02, 0x95, 0x00, 0xa0, 0x04, 0xa2, 0x07,
		0x20, 0x20, 0x02, 0xa2, 0x0a, 0xa0, 0x04, 0xb5,
		0x00, 0xd0, 0x07, 0xca, 0x88, 0xd0, 0xf8, 0x84,
		0x0b, 0x60, 0xa2, 0x07, 0xa0, 0x04, 0x20, 0x0a,
		0x02, 0xb5, 0x00, 0x30, 0x05, 0xc6, 0x0b, 0x4c,
		0x7a, 0x02, 0xa2, 0x0a, 0xa0, 0x03, 0x20, 0x15,
		0x02, 0xa5, 0x05, 0xf0, 0xe4, 0xa0, 0x03, 0x4c,
		0x20, 0x02, 0xa5, 0x0a, 0xd0, 0x13, 0xa2, 0x10,
		0x86, 0x00, 0xa2, 0x08, 0x86, 0x02, 0xa9, 0x00,
		0x85, 0x01, 0x85, 0x03, 0xa2, 0x04, 0x4c, 0x4a,
		0x02, 0xa5, 0x12, 0xd0, 0x01, 0x60, 0xa2, 0x0b,
		0xb5, 0x00, 0xc5, 0x13, 0xf0, 0x37, 0x38, 0xa9,
		0x00, 0xf5, 0x00, 0x65, 0x13, 0x10, 0x07, 0x38,
		0x85, 0x2c, 0xa9, 0x00, 0xe5, 0x2c, 0xc9, 0x18,
		0x30, 0x08, 0x38, 0xa5, 0x13, 0xf5, 0x00, 0x10,
		0xc5, 0x60, 0xa5, 0x13, 0x38, 0xf5, 0x00, 0xa8,
		0x30, 0x0b, 0xa2, 0x0b, 0x20, 0x15, 0x03, 0x88,
		0xd0, 0xf8, 0x4c, 0xf5, 0x02, 0xa2, 0x13, 0x20,
		0x15, 0x03, 0xc8, 0xd0, 0xf8, 0xa9, 0x00, 0x85,
		0x07, 0x85, 0x0f, 0xa2, 0x0b, 0x20, 0x15, 0x03,
		0xa2, 0x13, 0x20, 0x15, 0x03, 0xa2, 0x0f, 0x86,
		0x00, 0xa2, 0x07, 0x86, 0x02, 0xa2, 0x04, 0x20,
		0x2e, 0x02, 0x4c, 0x55, 0x02, 0xf6, 0x00, 0xca,
		0x98, 0xa0, 0x04, 0x48, 0xb5, 0x00, 0x30, 0x06,
		0x20, 0x15, 0x02, 0x4c, 0x2a, 0x03, 0x38, 0x20,
		0x16, 0x02, 0x68, 0xa8, 0x60, 0xa2, 0x08, 0xa0,
		0x03, 0x20, 0x20, 0x02, 0x4c, 0x9a, 0x02, 0x20,
		0xa5, 0x03, 0xa5, 0x13, 0x18, 0x65, 0x0b, 0x85,
		0x0b, 0xe6, 0x0b, 0xa9, 0x17, 0x85, 0x04, 0xa2,
		0x0a, 0xa0, 0x03, 0x20, 0x15, 0x02, 0x90, 0x0d,
		0xa2, 0x0d, 0x86, 0x00, 0xa2, 0x15, 0x86, 0x02,
		0xa2, 0x06, 0x20, 0x2e, 0x02, 0xa2, 0x1a, 0xa0,
		0x06, 0x20, 0x15, 0x02, 0xc6, 0x04, 0xd0, 0xdf,
		0xa2, 0x1a, 0xa0, 0x06, 0x20, 0x15, 0x02, 0xa6,
		0x17, 0xb5, 0x00, 0x2a, 0x10, 0x13, 0x18, 0xa0,
		0x03, 0xa9, 0x40, 0x75, 0x00, 0x85, 0x17, 0xa9,
		0x00, 0x75, 0x00, 0x95, 0x00, 0xe8, 0x88, 0xd0,
		0xf6, 0xa2, 0x07, 0x86, 0x02, 0xa2, 0x17, 0x86,
		0x00, 0xa2, 0x04, 0x20, 0x4a, 0x02, 0x20, 0x55,
		0x02, 0xa5, 0x06, 0xd0, 0x07, 0xa2, 0x08, 0xa0,
		0x03, 0x20, 0x20, 0x02, 0x60, 0xa9, 0x00, 0x85,
		0x03, 0x85, 0x01, 0xa9, 0x14, 0x85, 0x02, 0xa2,
		0x08, 0x20, 0x00, 0x02, 0xa9, 0x0c, 0x85, 0x02,
		0xa2, 0x04, 0x20, 0x00, 0x02, 0xa9, 0x01, 0x85,
		0x06, 0xa5, 0x0a, 0x10, 0x09, 0xc6, 0x06, 0xa2,
		0x08, 0xa0, 0x03, 0x20, 0x20, 0x02, 0xa5, 0x12,
		0x30, 0x01, 0x60, 0xc6, 0x06, 0xa2, 0x10, 0xa0,
		0x03, 0x4c, 0x20, 0x02, 0x20, 0xa5, 0x03, 0xa5,
		0x0a, 0xf0, 0x23, 0xa5, 0x13, 0x38, 0xe5, 0x0b,
		0x85, 0x0b, 0xe6, 0x0b, 0xa9, 0x17, 0x85, 0x04,
		0x20, 0x4e, 0x04, 0x30, 0x16, 0xa2, 0x10, 0x86,
		0x02, 0xa2, 0x14, 0x86, 0x00, 0xa2, 0x03, 0x20,
		0x4a, 0x02, 0x38, 0x4c, 0x0c, 0x04, 0xa9, 0xbf,
		0x4c, 0x06, 0x04, 0x18, 0xa2, 0x18, 0xa0, 0x03,
		0x20, 0x0b, 0x02, 0xa2, 0x10, 0xa0, 0x03, 0x20,
		0x0a, 0x02, 0xc6, 0x04, 0xd0, 0xd2, 0x20, 0x4e,
		0x04, 0x30, 0x1e, 0xa9, 0x01, 0x18, 0x65, 0x18,
		0x85, 0x18, 0xa9, 0x00, 0x65, 0x19, 0x85, 0x19,
		0xa9, 0x00, 0x65, 0x1a, 0x85, 0x1a, 0x10, 0x09,
		0xa2, 0x17, 0xa0, 0x03, 0x20, 0x15, 0x02, 0xe6,
		0x0b, 0xa2, 0x07, 0x86, 0x02, 0xa2, 0x17, 0x86,
		0x00, 0xa2, 0x04, 0x4c, 0x93, 0x03, 0xa2, 0x14,
		0x86, 0x02, 0xa2, 0x08, 0x86, 0x00, 0xa2, 0x03,
		0x20, 0x4a, 0x02, 0xa2, 0x14, 0x86, 0x02, 0xa2,
		0x10, 0x86, 0x00, 0xa0, 0x00, 0xa2, 0x03, 0x38,
		0xb1, 0x00, 0xf1, 0x02, 0x91, 0x02, 0xc8, 0xca,
		0xd0, 0xf6, 0xa5, 0x16, 0x60, 0xa9, 0x00, 0x85,
		0x01, 0x85, 0x03, 0xd8, 0xa2, 0x1c, 0x86, 0x02,
		0xa2, 0x0c, 0x20, 0x00, 0x02, 0x20, 0x80, 0x07,
		0xc9, 0xab, 0xf0, 0x06, 0xc9, 0xad, 0xd0, 0x08,
		0x85, 0x1c, 0x20, 0xc5, 0x07, 0x20, 0x80, 0x07,
		0xc9, 0x8f, 0xd0, 0x0b, 0xa9, 0xbc, 0x20, 0xc5,
		0x07, 0x20, 0xc0, 0x07, 0x4c, 0x75, 0x04, 0xc9,
		0xae, 0xd0, 0x12, 0x24, 0x1e, 0x10, 0x02, 0x30,
		0x2c, 0x85, 0x1e, 0xa0, 0x00, 0x84, 0x04, 0x20,
		0xc5, 0x07, 0x4c, 0x95, 0x04, 0xc9, 0xc5, 0xd0,
		0x42, 0x20, 0xc5, 0x07, 0x20, 0x80, 0x07, 0xc9,
		0xab, 0xf0, 0x06, 0xc9, 0xad, 0xd0, 0x08, 0x85,
		0x1d, 0x20, 0xc5, 0x07, 0x20, 0x80, 0x07, 0xc9,
		0x8f, 0xf0, 0xc1, 0xc9, 0xb0, 0x30, 0x56, 0xc9,
		0xba, 0x10, 0x52, 0x29, 0x0f, 0x85, 0x2c, 0xa2,
		0x27, 0xa9, 0x03, 0xd5, 0x00, 0x30, 0x46, 0xb5,
		0x00, 0x18, 0x36, 0x00, 0x36, 0x00, 0x75, 0x00,
		0x2a, 0x65, 0x2c, 0x95, 0x00, 0xa9, 0xb0, 0x05,
		0x2c, 0xd0, 0xce, 0xc9, 0xb0, 0x30, 0x2e, 0xc9,
		0xba, 0x10, 0x2a, 0xa8, 0xa9, 0xf8, 0x24, 0x25,
		0xd0, 0x83, 0x98, 0x20, 0xc5, 0x07, 0xe6, 0x04,
		0x29, 0x0f, 0x48, 0x20, 0xab, 0x05, 0xa2, 0x23,
		0x68, 0x18, 0x75, 0x00, 0x95, 0x00, 0xa9, 0x00,
		0x75, 0x01, 0x95, 0x01, 0xa9, 0x00, 0x75, 0x02,
		0x95, 0x02, 0x4c, 0x95, 0x04, 0xa5, 0x1c, 0xf0,
		0x07, 0xa2, 0x23, 0xa0, 0x03, 0x20, 0x20, 0x02,
		0xa9, 0x00, 0x85, 0x22, 0xa9, 0x07, 0x85, 0x02,
		0xa9, 0x22, 0x85, 0x00, 0xa2, 0x04, 0x20, 0x4a,
		0x02, 0xa0, 0x17, 0x84, 0x0b, 0x20, 0x55, 0x02,
		0xa5, 0x1d, 0xf0, 0x08, 0xa9, 0xff, 0x45, 0x27,
		0x85, 0x27, 0xe6, 0x27, 0xa5, 0x1e, 0xf0, 0x05,
		0xa9, 0x00, 0x38, 0xe5, 0x04, 0x18, 0x65, 0x27,
		0x85, 0x27, 0x30, 0x1d, 0xd0, 0x01, 0x60, 0x20,
		0x7d, 0x05, 0xd0, 0xfb, 0x60, 0xa9, 0x04, 0x85,
		0x13, 0xa9, 0x50, 0x85, 0x12, 0xa9, 0x00, 0x85,
		0x11, 0x85, 0x10, 0x20, 0x37, 0x03, 0xc6, 0x27,
		0x60, 0x20, 0x97, 0x05, 0xd0, 0xfb, 0x60, 0xa9,
		0xfd, 0x85, 0x13, 0xa9, 0x66, 0x85, 0x12, 0x85,
		0x11, 0xa9, 0x67, 0x85, 0x10, 0x20, 0x37, 0x03,
		0xe6, 0x27, 0x60, 0xa9, 0x00, 0x85, 0x26, 0xa2,
		0x1f, 0x86, 0x02, 0xa2, 0x23, 0x86, 0x00, 0xa2,
		0x04, 0x20, 0x4a, 0x02, 0xa2, 0x23, 0xa0, 0x04,
		0x20, 0x0a, 0x02, 0xa2, 0x23, 0xa0, 0x04, 0x20,
		0x0a, 0x02, 0xa2, 0x1f, 0x86, 0x00, 0xa2, 0x23,
		0x86, 0x02, 0xa2, 0x04, 0x20, 0x2e, 0x02, 0xa2,
		0x23, 0xa0, 0x04, 0x4c, 0x0a, 0x02, 0xa9, 0x00,
		0x85, 0x27, 0xa5, 0x0a, 0x30, 0x04, 0xa9, 0xab,
		0xd0, 0x09, 0xa2, 0x08, 0xa0, 0x03, 0x20, 0x20,
		0x02, 0xa9, 0xad, 0x20, 0xc5, 0x07, 0xa9, 0xb0,
		0x20, 0xc5, 0x07, 0xa9, 0xae, 0x20, 0xc5, 0x07,
		0xc6, 0x0b, 0x10, 0x0f, 0xa9, 0x04, 0x18, 0x65,
		0x0b, 0x10, 0x0e, 0x20, 0x7d, 0x05, 0xa5, 0x0b,
		0x4c, 0x02, 0x06, 0x20, 0x97, 0x05, 0x4c, 0x0e,
		0x06, 0xa2, 0x23, 0x86, 0x02, 0xa2, 0x08, 0x86,
		0x00, 0xa2, 0x03, 0x20, 0x4a, 0x02, 0xa9, 0x00,
		0x85, 0x26, 0xa2, 0x23, 0xa0, 0x03, 0x20, 0x0a,
		0x02, 0x20, 0xab, 0x05, 0xe6, 0x0b, 0xf0, 0x0a,
		0xa2, 0x26, 0xa0, 0x04, 0x20, 0x15, 0x02, 0x4c,
		0x34, 0x06, 0xa9, 0x07, 0x85, 0x04, 0xa5, 0x26,
		0xf0, 0x11, 0xa5, 0x26, 0x09, 0xb0, 0x20, 0xc5,
		0x07, 0xc6, 0x04, 0xf0, 0x1a, 0x20, 0xab, 0x05,
		0x4c, 0x4a, 0x06, 0xc6, 0x27, 0xa5, 0x25, 0xd0,
		0xf0, 0xa5, 0x24, 0xd0, 0xec, 0xa5, 0x23, 0xd0,
		0xe8, 0xa9, 0x00, 0x85, 0x27, 0xf0, 0xe2, 0xa9,
		0xc5, 0x20, 0xc5, 0x07, 0xa5, 0x27, 0x30, 0x05,
		0xa9, 0xab, 0x4c, 0x85, 0x06, 0x49, 0xff, 0x85,
		0x27, 0xe6, 0x27, 0xa9, 0xad, 0x20, 0xc5, 0x07,
		0xa0, 0x00, 0xa5, 0x27, 0x38, 0xe9, 0x0a, 0x30,
		0x06, 0x85, 0x27, 0xc8, 0x4c, 0x8c, 0x06, 0x98,
		0x09, 0xb0, 0x20, 0xc5, 0x07, 0xa5, 0x27, 0x09,
		0xb0, 0x4c, 0xc5, 0x07, 0xa9, 0x8d, 0x20, 0xc5,
		0x07, 0xa9, 0x8a, 0x20, 0xc5, 0x07, 0x20, 0x75,
		0x04, 0x20, 0xc0, 0x07, 0xa2, 0x28, 0x86, 0x02,
		0xa2, 0x08, 0x86, 0x00, 0xa2, 0x04, 0x20, 0x4a,
		0x02, 0x20, 0x80, 0x07, 0xc9, 0xab, 0xd0, 0x09,
		0x20, 0x01, 0x07, 0x20, 0x9a, 0x02, 0x4c, 0xf5,
		0x06, 0xc9, 0xad, 0xd0, 0x09, 0x20, 0x01, 0x07,
		0x20, 0x2d, 0x03, 0x4c, 0xf5, 0x06, 0xc9, 0xd8,
		0xd0, 0x09, 0x20, 0x01, 0x07, 0x20, 0x37, 0x03,
		0x4c, 0xf5, 0x06, 0xc9, 0xaf, 0xd0, 0x0c, 0x20,
		0x01, 0x07, 0x20, 0xdc, 0x03, 0x20, 0xde, 0x05,
		0x4c, 0xa4, 0x06, 0xc9, 0x8f, 0xd0, 0xc2, 0xf0,
		0xa3, 0x20, 0xc5, 0x07, 0x20, 0xc0, 0x07, 0x20,
		0x75, 0x04, 0x20, 0xc0, 0x07, 0xa9, 0xbd, 0x20,
		0xc5, 0x07, 0x20, 0xc0, 0x07, 0xa2, 0x10, 0x86,
		0x02, 0xa2, 0x28, 0x86, 0x00, 0xa2, 0x04, 0x4c,
		0x4a, 0x02,
	}

	adr := uint16(0x200)
	var ofs int

	for ofs < len(code) {
		sIns, n := cpu.Disassemble(adr, code[ofs:])
		sMem := memString(adr, code[ofs:ofs+n])
		fmt.Printf("%s %s\n", sMem, sIns)
		ofs += n
		adr += uint16(n)
	}

}

//-----------------------------------------------------------------------------
